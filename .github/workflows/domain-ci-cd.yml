name: Centralized Dashboard Domain CI/CD

on:
  push:
    branches: [dev, staging, main]
  pull_request:
    branches: [dev, staging, main]
  workflow_dispatch:
    inputs:
      deploy_environment:
        description: 'Target deployment environment'
        required: true
        default: 'development'
        type: choice
        options:
        - development
        - staging
        - production
      force_rebuild:
        description: 'Force rebuild all services'
        required: false
        default: false
        type: boolean

env:
  DOMAIN_NAME: centralized-dashboard
  NODE_VERSION: '22'
  JAVA_VERSION: '17'
  MAVEN_OPTS: '-Xmx2048m'

jobs:
  # Job 1: Detect Changes and Services
  detect-domain-changes:
    name: 🔍 Domain Service Detection
    runs-on: ubuntu-latest
    outputs:
      java-services: ${{ steps.services.outputs.java-services }}
      nodejs-services: ${{ steps.services.outputs.nodejs-services }}
      infrastructure-services: ${{ steps.services.outputs.infrastructure-services }}
      deploy-needed: ${{ steps.changes.outputs.deploy-needed }}
      
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Detect Domain Services
        id: services
        run: |
          echo "🔍 Scanning centralized-dashboard domain services..."
          
          # Java Services (Spring Boot with pom.xml) - Domain specific only
          java_services=""
          for dir in centralized-*/; do
            if [ -f "${dir}pom.xml" ] && [ -d "$dir" ]; then
              service_name=$(basename "$dir")
              # Only include centralized-dashboard domain services
              if [[ "$service_name" == centralized-* ]] && [[ ! "$service_name" == *-production ]] && [[ ! "$service_name" == *-staging ]] && [[ ! "$service_name" == *-shared ]]; then
                if [ -z "$java_services" ]; then
                  java_services="$service_name"
                else
                  java_services="$java_services,$service_name"
                fi
                echo "✅ Java Service: $service_name"
              fi
            fi
          done
          
          # Node.js Services (React/TypeScript with package.json) - Domain specific only
          nodejs_services=""
          for dir in centralized-*/; do
            if [ -f "${dir}package.json" ] && [ ! -f "${dir}pom.xml" ] && [ -d "$dir" ]; then
              service_name=$(basename "$dir")
              # Only include centralized-dashboard domain Node.js services
              if [[ "$service_name" == centralized-* ]]; then
                if [ -z "$nodejs_services" ]; then
                  nodejs_services="$service_name"
                else
                  nodejs_services="$nodejs_services,$service_name"
                fi
                echo "✅ Node.js Service: $service_name"
              fi
            fi
          done
          
          # Add executive-command-center (special case)
          if [ -f "executive-command-center/package.json" ] && [ -d "executive-command-center" ]; then
            if [ -z "$nodejs_services" ]; then
              nodejs_services="executive-command-center"
            else
              nodejs_services="$nodejs_services,executive-command-center"
            fi
            echo "✅ Node.js Service: executive-command-center"
          fi
          
          # Infrastructure Services (K8s configs only) - Domain specific only
          infra_services=""
          for dir in centralized-dashboard-*/; do
            if [ -d "${dir}k8s" ] && [ ! -f "${dir}package.json" ] && [ ! -f "${dir}pom.xml" ] && [ -d "$dir" ]; then
              service_name=$(basename "$dir")
              # Only include centralized-dashboard infrastructure services
              if [[ "$service_name" == centralized-dashboard-* ]]; then
                if [ -z "$infra_services" ]; then
                  infra_services="$service_name"
                else
                  infra_services="$infra_services,$service_name"
                fi
                echo "✅ Infrastructure Service: $service_name"
              fi
            fi
          done
          
          echo "java-services=$java_services" >> $GITHUB_OUTPUT
          echo "nodejs-services=$nodejs_services" >> $GITHUB_OUTPUT
          echo "infrastructure-services=$infra_services" >> $GITHUB_OUTPUT
          
      - name: Determine Build Strategy
        id: changes
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            if [ "${{ github.event.inputs.force_rebuild }}" = "true" ]; then
              echo "deploy-needed=true" >> $GITHUB_OUTPUT
              echo "🚀 Force rebuild requested"
            else
              echo "deploy-needed=true" >> $GITHUB_OUTPUT
              echo "🎯 Manual deployment triggered"
            fi
          else
            echo "deploy-needed=true" >> $GITHUB_OUTPUT
            echo "🔄 Code changes detected"
          fi

  # Job 2: Build Java Services
  build-java-services:
    name: 🏗️ Build Java Services
    runs-on: ubuntu-latest
    needs: detect-domain-changes
    if: needs.detect-domain-changes.outputs.java-services != '' && needs.detect-domain-changes.outputs.deploy-needed == 'true'
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'
          cache: maven
          
      - name: Build Java Services
        run: |
          echo "🔨 Building Java services in centralized-dashboard domain..."
          
          # Build parent POM first
          if [ -f "pom.xml" ] && [ -f "mvnw" ]; then
            echo "Building parent POM..."
            chmod +x ./mvnw
            ./mvnw clean compile -q -DskipTests
          else
            echo "Parent POM build skipped - using service-level builds"
          fi
          
          # Build each Java service
          IFS=',' read -ra SERVICES <<< "${{ needs.detect-domain-changes.outputs.java-services }}"
          for service in "${SERVICES[@]}"; do
            if [ -d "$service" ] && [ -f "$service/pom.xml" ]; then
              echo "Building Java service: $service"
              cd "$service"
              
              # Ensure Maven wrapper is executable
              if [ -f "./mvnw" ]; then
                chmod +x ./mvnw
                if ./mvnw clean compile package -DskipTests -q -Dspring.profiles.active=development; then
                  echo "✅ $service: BUILD SUCCESS"
                else
                  echo "❌ $service: BUILD FAILED"
                  exit 1
                fi
              else
                echo "⚠️ $service: No mvnw found, skipping"
              fi
              cd ..
            fi
          done
          
      - name: Run Java Tests
        run: |
          echo "🧪 Testing Java services..."
          
          IFS=',' read -ra SERVICES <<< "${{ needs.detect-domain-changes.outputs.java-services }}"
          for service in "${SERVICES[@]}"; do
            if [ -d "$service" ] && [ -f "$service/pom.xml" ]; then
              echo "Testing Java service: $service"
              cd "$service"
              
              if [ -f "./mvnw" ]; then
                ./mvnw test -q -Dspring.profiles.active=test || echo "⚠️ Tests failed for $service"
              fi
              cd ..
            fi
          done

  # Job 3: Build Node.js Services  
  build-nodejs-services:
    name: 🚀 Build Node.js Services
    runs-on: ubuntu-latest
    needs: detect-domain-changes
    if: needs.detect-domain-changes.outputs.nodejs-services != '' && needs.detect-domain-changes.outputs.deploy-needed == 'true'
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          # Remove cache since package-lock.json is in subdirectories
          
      - name: Build Node.js Services
        run: |
          echo "🔨 Building Node.js services in centralized-dashboard domain..."
          
          IFS=',' read -ra SERVICES <<< "${{ needs.detect-domain-changes.outputs.nodejs-services }}"
          for service in "${SERVICES[@]}"; do
            if [ -d "$service" ] && [ -f "$service/package.json" ]; then
              echo "Building Node.js service: $service"
              cd "$service"
              
              # Install dependencies and build
              if npm ci && npm run build; then
                echo "✅ $service: BUILD SUCCESS"
              else
                echo "❌ $service: BUILD FAILED"
                exit 1
              fi
              cd ..
            fi
          done
          
      - name: Run Node.js Tests
        run: |
          echo "🧪 Testing Node.js services..."
          
          IFS=',' read -ra SERVICES <<< "${{ needs.detect-domain-changes.outputs.nodejs-services }}"
          for service in "${SERVICES[@]}"; do
            if [ -d "$service" ] && [ -f "$service/package.json" ]; then
              echo "Testing Node.js service: $service"
              cd "$service"
              
              npm test || echo "⚠️ Tests failed for $service"
              cd ..
            fi
          done

  # Job 4: Validate Infrastructure
  validate-infrastructure:
    name: 🔧 Validate Infrastructure
    runs-on: ubuntu-latest
    needs: detect-domain-changes
    if: needs.detect-domain-changes.outputs.infrastructure-services != '' && needs.detect-domain-changes.outputs.deploy-needed == 'true'
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        
      - name: Validate Infrastructure Configs
        run: |
          echo "🔧 Validating infrastructure configurations..."
          
          IFS=',' read -ra SERVICES <<< "${{ needs.detect-domain-changes.outputs.infrastructure-services }}"
          for service in "${SERVICES[@]}"; do
            if [ -d "$service/k8s" ]; then
              echo "Validating infrastructure service: $service"
              
              # Validate Kubernetes manifests
              for manifest in "$service/k8s"/*.yaml "$service/k8s"/*.yml; do
                if [ -f "$manifest" ]; then
                  echo "Validating: $manifest"
                  # Basic YAML syntax validation
                  python3 -c "import yaml; yaml.safe_load(open('$manifest'))" && echo "✅ Valid YAML" || echo "❌ Invalid YAML"
                fi
              done
            fi
          done

  # Job 5: Domain Integration Summary
  domain-integration-summary:
    name: 📊 Domain Summary
    runs-on: ubuntu-latest
    needs: [detect-domain-changes, build-java-services, build-nodejs-services, validate-infrastructure]
    if: always()
    
    steps:
      - name: Domain Build Summary
        run: |
          echo "📊 Centralized Dashboard Domain - CI/CD Summary"
          echo "=============================================="
          echo ""
          echo "🔍 Service Detection: ${{ needs.detect-domain-changes.result }}"
          echo "🏗️ Java Services: ${{ needs.build-java-services.result }}"
          echo "🚀 Node.js Services: ${{ needs.build-nodejs-services.result }}"
          echo "🔧 Infrastructure: ${{ needs.validate-infrastructure.result }}"
          echo ""
          echo "📋 Domain Services Summary:"
          echo "Java Services: ${{ needs.detect-domain-changes.outputs.java-services }}"
          echo "Node.js Services: ${{ needs.detect-domain-changes.outputs.nodejs-services }}"
          echo "Infrastructure: ${{ needs.detect-domain-changes.outputs.infrastructure-services }}"
          echo ""
          
          if [ "${{ needs.build-java-services.result }}" = "success" ] && [ "${{ needs.build-nodejs-services.result }}" = "success" ]; then
            echo "✅ All centralized-dashboard services built successfully"
            echo "✅ Domain is ready for deployment"
          else
            echo "⚠️ Some builds failed - check logs"
            echo "🔄 Domain requires attention"
          fi

concurrency:
  group: centralized-dashboard-cicd-${{ github.ref }}
  cancel-in-progress: true